{"name":"Fearme","tagline":"The F.E.A.R_me Project","body":"fearMe\r\n======\r\n\r\nThe F.E.A.R_me Project\r\n\r\nThis howto assumes:\r\n\r\nHOME=/home/pi\r\nREPO_DIR=/home/Desktop/code/fearMe\r\n\r\nDependencies to be installed on Raspbian:\r\n\r\n```\r\n sudo apt-get install python-serial python3-serial python3-dev python3-rpi.gpio i2c-tools festival espeak xsel festlex-cmu arduino gcc-avr avr-libc avrdude libimobiledevice-utils vim tmux htop festvox-don festvox-rablpc16k festvox-kallpc16k festvox-kdlpc16k\r\n```\r\n\r\nDisable screen sleep\r\n--------------------\r\n\r\nIf X is running:\r\n\r\n```\r\nsudo vi /etc/lightdm/lightdm.conf\r\nxserver-command=X -s 0 dpms\r\n```\r\n\r\nIf only on console:\r\n\r\n```\r\nsudo vi /etc/kbd/config\r\nBLANK_TIME=0\r\nPOWERDOWN_TIME=0\r\n```\r\n\r\nraspian-config\r\n--------------\r\n\r\nAdd:\r\n\r\n```\r\nLC_ALL=en_GB.UTF-8\r\nLANGUAGE=en_GB.UTF-8\r\n```\r\n\r\nTo:\r\n```\r\n/etc/default/locale\r\n```\r\n\r\npython3-smbus\r\n-------------\r\n\r\n```\r\nmkdir -p ~/Desktop/code/fearMe/Downloads\r\ncd ~/Desktop/code/fearMe/Downloads\r\nwget -c http://ftp.de.debian.org/debian/pool/main/i/i2c-tools/i2c-tools_3.1.0.orig.tar.bz2\r\ntar xf i2c-tools_3.1.0.orig.tar.bz2\r\ncd i2c-tools-3.1.0/py-smbus\r\ncp smbusmodule.c smbusmodule.c.orig\r\ncat ~/Desktop/code/fearMe/Patches/smbusmodule.c.diff | patch\r\nwget -c http://dl.lm-sensors.org/lm-sensors/releases/lm_sensors-2.10.8.tar.gz\r\ntar xfz lm_sensors-2.10.8.tar.gz\r\ncp lm_sensors-2.10.8/kernel/include/i2c-dev.h .\r\nrm -r lm_sensors-2.10.8*\r\npython3 setup.py build\r\nsudo python3 setup.py install\r\n```\r\n\r\nArduino\r\n-------\r\n\r\nFetch the NeoPixel library:\r\n\r\n```\r\nmkdir -p ~/sketchbook/libraries\r\ncd ~/sketchbook/libraries\r\ngit clone git@github.com:SteveClement/Adafruit_NeoPixel.git\r\n```\r\n\r\nGet the Arduino-Makfile project:\r\n\r\n```\r\ncd ~/Desktop/code\r\ngit clone https://github.com/sudar/Arduino-Makefile.git\r\n```\r\n\r\nUpgrade to Arduino 1.0.5 to use the Arduino micro board:\r\n\r\n```\r\nmkdir ~/Desktop/code/fearMe/Arduino/Downloads\r\ncd ~/Desktop/code/fearMe/Arduino/Downloads\r\nwget -c http://arduino.googlecode.com/files/arduino-1.0.5-linux32.tgz\r\ntar zxvf arduino-1.0.5-linux32.tgz\r\ncd arduino-1.0.5\r\nrm -rf hardware/tools\r\nsudo cp -ru lib /usr/share/arduino\r\nsudo cp -ru libraries /usr/share/arduino\r\nsudo cp -ru tools /usr/share/arduino\r\nsudo cp -ru hardware /usr/share/arduino\r\nsudo cp -ru examples /usr/share/doc/arduino-core\r\nsudo cp -ru reference /usr/share/doc/arduino-core\r\ncd ..\r\nrm -rf arduino-1.0.5\r\ntar zxvf arduino-1.0.5-linux32.tgz\r\n```\r\n\r\nput this to your .bashrc\r\n\r\n```\r\nexport ARDUINO_DIR=/home/pi/Desktop/code/fearMe/Arduino/Downloads/arduino-1.0.5\r\nexport ARDMK_DIR=/home/pi/Desktop/code/Arduino-Makefile\r\nexport AVR_TOOLS_DIR=/usr\r\nexport EDITOR=vim\r\n```\r\n\r\nLCD Display\r\n-----------\r\n\r\nAdd:\r\n\r\n```\r\ni2c-bcm2708\r\ni2c-dev\r\n```\r\n\r\nTo:\r\n\r\n```\r\n/etc/modules\r\n```\r\n\r\nAdd your user to the group: i2c\r\n\r\n```\r\nsudo vigr\r\nsudo vigr -s\r\n```\r\n\r\nHigh quality voices\r\n-------------------\r\n\r\nmbrola\r\n------\r\n\r\nThese voices are provided by the MBROLA project, run by the TCTS Lab of the FacultÃ© Polytechnique de Mons in Belgium. They offer several voices, in a variety of languages, which sound much better than the Festvox diphone voices. The database of voices can be viewed at the project's download page. See the voice demo page (the us1, us2 and us3 are the voices of interest). To use the MBROLA voices we need three parts: (1.) the mbrola binary program that parses a tokenstream the festival program feeds it and returns audio data back to festival, (2.) the MBROLA voices, and (3.) the Festvox wrappers to let the festival program use the voices. This may sound scary, but it's really very easy to do.\r\n\r\n```\r\nmkdir -p ~/Desktop/code/fearMe/Downloads\r\ncd ~/Desktop/code/fearMe/Downloads\r\nmkdir mbrola_tmp\r\ncd mbrola_tmp/\r\nwget -c http://tcts.fpms.ac.be/synthesis/mbrola/bin/raspberri_pi/mbrola.tgz\r\nwget -c http://tcts.fpms.ac.be/synthesis/mbrola/dba/us1/us1-980512.zip\r\nwget -c http://tcts.fpms.ac.be/synthesis/mbrola/dba/us2/us2-980812.zip\r\nwget -c http://tcts.fpms.ac.be/synthesis/mbrola/dba/us3/us3-990208.zip\r\nwget -c http://www.festvox.org/packed/festival/latest/festvox_us1.tar.gz\r\nwget -c http://leb.net/pub/blinux/festival/mirror.festival_home/1.4.2/festvox_us1.tar.gz\r\nwget -c http://leb.net/pub/blinux/festival/mirror.festival_home/1.4.2/festvox_us2.tar.gz\r\nwget -c http://leb.net/pub/blinux/festival/mirror.festival_home/1.4.2/festvox_us3.tar.gz\r\nunzip -x us1-980512.zip\r\nunzip -x us2-980812.zip\r\nunzip -x us3-990208.zip\r\ntar xvf festvox_us1.tar.gz\r\ntar xvf festvox_us2.tar.gz\r\ntar xvf festvox_us3.tar.gz\r\ntar xfvz mbrola.tgz\r\nsudo cp mbrola /usr/local/bin/\r\nsudo mkdir -p /usr/share/festival/voices/english/us1_mbrola/\r\nsudo mkdir -p /usr/share/festival/voices/english/us2_mbrola/\r\nsudo mkdir -p /usr/share/festival/voices/english/us3_mbrola/\r\nsudo mv us1 /usr/share/festival/voices/english/us1_mbrola/\r\nsudo mv us2 /usr/share/festival/voices/english/us2_mbrola/\r\nsudo mv us3 /usr/share/festival/voices/english/us3_mbrola/\r\nsudo mv festival/lib/voices/english/us1_mbrola/* /usr/share/festival/voices/english/us1_mbrola/\r\nsudo mv festival/lib/voices/english/us2_mbrola/* /usr/share/festival/voices/english/us2_mbrola/\r\nsudo mv festival/lib/voices/english/us3_mbrola/* /usr/share/festival/voices/english/us3_mbrola/\r\ncd ../\r\nrm -rf mbrola_tmp/\r\n```\r\n\r\nCMU Arctic\r\n----------\r\nThese voices were developed by the Language Technologies Institute at Carnegie Mellon University. They sound much better than both the diphone and the MBROLA voices. See the information page and voice demo page (the *_arctic_cg are the voices of interest). The drawback is that each voice takes over a hundred megs on disk, and with six English voices to choose from, that can take up a lot of bandwidth to download and depending on how much disk space you have to work with, six-hundred plus megs of space might be a bit much for voice data. However, the HTS voices discussed in the next section may in fact provide equal or better quality synthesis, and are only less than %2 of the size.\r\n\r\n```\r\nmkdir cmu_tmp\r\ncd cmu_tmp/\r\nwget -c http://www.speech.cs.cmu.edu/cmu_arctic/packed/cmu_us_awb_arctic-0.90-release.tar.bz2\r\nwget -c http://www.speech.cs.cmu.edu/cmu_arctic/packed/cmu_us_bdl_arctic-0.95-release.tar.bz2\r\nwget -c http://www.speech.cs.cmu.edu/cmu_arctic/packed/cmu_us_clb_arctic-0.95-release.tar.bz2\r\nwget -c http://www.speech.cs.cmu.edu/cmu_arctic/packed/cmu_us_jmk_arctic-0.95-release.tar.bz2\r\nwget -c http://www.speech.cs.cmu.edu/cmu_arctic/packed/cmu_us_ksp_arctic-0.95-release.tar.bz2\r\nwget -c http://www.speech.cs.cmu.edu/cmu_arctic/packed/cmu_us_rms_arctic-0.95-release.tar.bz2\r\nwget -c http://www.speech.cs.cmu.edu/cmu_arctic/packed/cmu_us_slt_arctic-0.95-release.tar.bz2\r\nfor t in `ls cmu_*` ; do tar xf $t ; done\r\nrm *.bz2\r\nsudo mkdir -p /usr/share/festival/voices/english/\r\nsudo mv * /usr/share/festival/voices/english/\r\nfor d in `ls /usr/share/festival/voices/english` ; do\r\nif [[ \"$d\" =~ \"cmu_us_\" ]] ; then\r\n\tsudo mv \"/usr/share/festival/voices/english/${d}\" \"/usr/share/festival/voices/english/${d}_clunits\" \r\nfi ; done\r\ncd ../\r\nrm -rf cmu_tmp/\r\n```\r\n\r\nNitech HTS\r\n----------\r\nThese voices are produced by the HTS working group hosted at the Nagoya Institute of Technology. They have produced excellent quality voices which take up very little disk space. In terms of quality and size, probably the best (non-commercial) English voices availible for Festival. See the voice demo page (the *_arctic_hts are the voices of interest). Highly recommended. The voices are available on their download page.\r\n\r\n\r\n```\r\nmkdir hts_tmp\r\ncd hts_tmp/\r\nwget -c http://hts.sp.nitech.ac.jp/archives/2.1/festvox_nitech_us_awb_arctic_hts-2.1.tar.bz2\r\nwget -c http://hts.sp.nitech.ac.jp/archives/2.1/festvox_nitech_us_bdl_arctic_hts-2.1.tar.bz2\r\nwget -c http://hts.sp.nitech.ac.jp/archives/2.1/festvox_nitech_us_clb_arctic_hts-2.1.tar.bz2\r\nwget -c http://hts.sp.nitech.ac.jp/archives/2.1/festvox_nitech_us_rms_arctic_hts-2.1.tar.bz2\r\nwget -c http://hts.sp.nitech.ac.jp/archives/2.1/festvox_nitech_us_slt_arctic_hts-2.1.tar.bz2\r\nwget -c http://hts.sp.nitech.ac.jp/archives/2.1/festvox_nitech_us_jmk_arctic_hts-2.1.tar.bz2\r\nwget -c http://hts.sp.nitech.ac.jp/archives/1.1.1/cmu_us_kal_com_hts.tar.gz\r\nwget -c http://hts.sp.nitech.ac.jp/archives/1.1.1/cstr_us_ked_timit_hts.tar.gz\r\nfor t in `ls` ; do tar xvf $t ; done\r\nsudo mkdir -p /usr/share/festival/voices/us\r\nsudo mv lib/voices/us/* /usr/share/festival/voices/us/\r\nsudo mv lib/hts.scm /usr/share/festival/hts.scm\r\ncd ../\r\nrm -rf hts_tmp/\r\n```\r\n\r\nTesting\r\n-------\r\n\r\n```\r\nfor d in `ls /usr/share/festival/voices` ; do ls \"/usr/share/festival/voices/${d}\" ; done\r\n\r\n$ festival\r\nfestival> (voice.list)\r\nfestival> (voice_us2_mbrola)\r\nfestival> (SayText \"Hello from Ubuntu\")\r\nfestival> (tts \"story.txt\" nil)\r\nfestival> (intro)\r\n```\r\n\r\ncrontab\r\n-------\r\n\r\nAdd:\r\n\r\n```\r\n@reboot ~/Desktop/code/fearMe/Scripts/fearMe_tmux.sh\r\n5/* * * * * ~/Desktop/code/fearMe/Scripts/cleanUp.sh\r\n```\r\n\r\nto your $LUSER crontab\r\n\r\nFinally, you can ask the plate which buttons are pressed with buttonPressed(lcd.BUTTONNAME) where BUTTONNAME is LEFT RIGHT UP DOWN or SELECT. This is not an interrupt-driven library so you can't have an interrupt go off when a button in pressed, instead you'll have to query the button in a loop. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}