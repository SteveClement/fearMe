--- smbusmodule.c.orig	2014-05-11 18:40:03.653579438 +0000
+++ smbusmodule.c	2014-05-11 18:40:59.552300912 +0000
@@ -1,16 +1,16 @@
 /*
  * smbusmodule.c - Python bindings for Linux SMBus access through i2c-dev
- * Copyright (C) 2005-2007 Mark M. Hoffman <mhoffman@lightlink.com>
+ * Copyright (C) 2005-2007 Mark M. Hoffman <mhoffman@xxxxxxxxxxxxx>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; version 2 of the License.
- * 
+ *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
@@ -21,7 +21,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <fcntl.h>
-#include <linux/i2c-dev.h>
+#include "i2c-dev.h"
 
 /*
 ** These are required to build this module against Linux older than 2.6.23.
@@ -32,7 +32,7 @@
 #define I2C_SMBUS_I2C_BLOCK_DATA	8
 #endif
 
-PyDoc_STRVAR(SMBus_module_doc,
+/*yDoc_STRVAR(SMBus_module_doc,
 	"This module defines an object type that allows SMBus transactions\n"
 	"on hosts running the Linux kernel.  The host kernel must have I2C\n"
 	"support, I2C device interface support, and a bus adapter driver.\n"
@@ -41,6 +41,7 @@
 	"\n"
 	"Because the I2C device interface is opened R/W, users of this\n"
 	"module usually must have root permissions.\n");
+*/
 
 typedef struct {
 	PyObject_HEAD
@@ -91,7 +92,9 @@
 	PyObject *ref = SMBus_close(self);
 	Py_XDECREF(ref);
 
-	self->ob_type->tp_free((PyObject *)self);
+    /*old python 2.7 declaration */
+	/*self->ob_type->tp_free((PyObject *)self);*/
+	Py_TYPE(self)->tp_free((PyObject*)self);
 }
 
 #define MAXPATH 16
@@ -431,11 +434,11 @@
 
 	for (ii = 0; ii < len; ii++) {
 		PyObject *val = PyList_GET_ITEM(list, ii);
-		if (!PyInt_Check(val)) {
+		if (!PyLong_Check(val)) {
 			PyErr_SetString(PyExc_TypeError, msg);
 			return 0; /* fail */
 		}
-		data->block[ii+1] = (__u8)PyInt_AS_LONG(val);
+		data->block[ii+1] = (__u8)PyLong_AS_LONG(val);
 	}
 
 	return 1; /* success */
@@ -611,7 +614,7 @@
 		return -1;
 	}
 	else if (pec == -1) {
-		PyErr_SetString(PyExc_TypeError, 
+		PyErr_SetString(PyExc_TypeError,
 			"The pec attribute must be a boolean.");
 		return -1;
 	}
@@ -633,12 +636,16 @@
 	{NULL},
 };
 
+/* old Python 2.7 declaration */
 static PyTypeObject SMBus_type = {
-	PyObject_HEAD_INIT(NULL)
-	0,				/* ob_size */
+/*tatic struct PyModuleDef SMBus_type = {*/
+    /* old Python 2.7 declaration */
+	/* PyObject_HEAD_INIT(NULL) */
+	/*0,				 ob_size */
+	PyVarObject_HEAD_INIT(NULL, 0)
 	"SMBus",			/* tp_name */
-	sizeof(SMBus),			/* tp_basicsize */
-	0,				/* tp_itemsize */
+	sizeof(SMBus),		/* tp_basicsize */
+	0,				    /* tp_itemsize */
 	(destructor)SMBus_dealloc,	/* tp_dealloc */
 	0,				/* tp_print */
 	0,				/* tp_getattr */
@@ -654,45 +661,70 @@
 	0,				/* tp_getattro */
 	0,				/* tp_setattro */
 	0,				/* tp_as_buffer */
-	Py_TPFLAGS_DEFAULT,		/* tp_flags */
-	SMBus_type_doc,			/* tp_doc */
+	Py_TPFLAGS_DEFAULT, /* tp_flags */
+	SMBus_type_doc,		/* tp_doc */
 	0,				/* tp_traverse */
 	0,				/* tp_clear */
 	0,				/* tp_richcompare */
 	0,				/* tp_weaklistoffset */
 	0,				/* tp_iter */
 	0,				/* tp_iternext */
-	SMBus_methods,			/* tp_methods */
-	0,				/* tp_members */
-	SMBus_getset,			/* tp_getset */
+	SMBus_methods,	/* tp_methods */
+	0,              /* tp_members */
+	SMBus_getset,	/* tp_getset */
 	0,				/* tp_base */
 	0,				/* tp_dict */
 	0,				/* tp_descr_get */
 	0,				/* tp_descr_set */
 	0,				/* tp_dictoffset */
-	(initproc)SMBus_init,		/* tp_init */
+	(initproc)SMBus_init,   /* tp_init */
 	0,				/* tp_alloc */
-	SMBus_new,			/* tp_new */
+	SMBus_new,		/* tp_new */
 };
 
-static PyMethodDef SMBus_module_methods[] = {
+/*static PyMethodDef SMBus_module_methods[] = {
 	{NULL}
-};
+};*/
+
+static struct PyModuleDef SMBusModule = {
+        PyModuleDef_HEAD_INIT,
+        "SMBus",     /* m_name */
+        "This module defines an object type that allows SMBus transactions\n"
+	    "on hosts running the Linux kernel.  The host kernel must have I2C\n"
+	    "support, I2C device interface support, and a bus adapter driver.\n"
+	    "All of these can be either built-in to the kernel, or loaded from\n"
+	    "modules.\n"
+	    "\n"
+	    "Because the I2C device interface is opened R/W, users of this\n"
+	    "module usually must have root permissions.\n",  /* m_doc */
+        -1,                  /* m_size */
+        NULL,    /* m_methods */
+        NULL,                /* m_reload */
+        NULL,                /* m_traverse */
+        NULL,                /* m_clear */
+        NULL,                /* m_free */
+    };
 
 #ifndef PyMODINIT_FUNC	/* declarations for DLL import/export */
 #define PyMODINIT_FUNC void
 #endif
 PyMODINIT_FUNC
-initsmbus(void) 
+PyInit_smbus(void)
 {
 	PyObject* m;
 
-	if (PyType_Ready(&SMBus_type) < 0)
-		return;
+    if (PyType_Ready(&SMBus_type) < 0)
+		return NULL;
 
-	m = Py_InitModule3("smbus", SMBus_module_methods, SMBus_module_doc);
+    /* old Python 2.7 declaration */
+	/*m = Py_InitModule3("smbus", SMBus_module_methods, SMBus_module_doc);*/
+	m = PyModule_Create(&SMBusModule);
+	
+    if (m == NULL)
+        return NULL;
 
 	Py_INCREF(&SMBus_type);
 	PyModule_AddObject(m, "SMBus", (PyObject *)&SMBus_type);
+	
+	return m;
 }
-
